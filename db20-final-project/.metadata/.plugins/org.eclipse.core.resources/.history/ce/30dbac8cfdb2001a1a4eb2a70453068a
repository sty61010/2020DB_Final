/*******************************************************************************
 * Copyright 2016, 2018 vanilladb.org contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package org.vanilladb.bench.server.procedure.micro;

import java.util.HashMap;
import java.util.Map;

import org.calvin.cache.CalvinRecord;
import org.calvin.sql.RecKey;
import org.calvin.storedprocedures.CalvinStoredProcedure;
import org.vanilladb.bench.server.param.micro.MicroTxnProcParamHelper;
import org.vanilladb.bench.server.procedure.StoredProcedureHelper;
import org.vanilladb.core.query.algebra.Scan;
import org.vanilladb.core.sql.Constant;
import org.vanilladb.core.sql.DoubleConstant;
import org.vanilladb.core.sql.IntegerConstant;
import org.vanilladb.core.sql.storedprocedure.StoredProcedure;
import org.vanilladb.core.storage.tx.Transaction;

public class MicroTxnProc extends CalvinStoredProcedure<MicroTxnProcParamHelper> {
	private Map<RecKey, Constant> writeConstantMap = new HashMap<RecKey, Constant>();

	public MicroTxnProc() {
		super(new MicroTxnProcParamHelper());
	}
	@Override
	protected  void prepareRecKey() {
		for (int idx = 0; idx < paramHelper.getReadCount(); idx++) {
			int iid = paramHelper.getReadItemId(idx);
			
			// create record key for reading
			Map<String, Constant> keyEntryMap = new HashMap<String, Constant>();
			keyEntryMap.put("i_id", new IntegerConstant(iid));
			RecKey key = new RecKey("item", keyEntryMap);
			String sql = "SELECT i_name, i_price FROM item WHERE i_id = " + iid;

			addReadKey(key, sql);
		}
		// set write keys
		for (int idx = 0; idx < paramHelper.getWriteCount(); idx++) {
			int iid = paramHelper.getWriteItemId(idx);
			double newPrice = paramHelper.getNewItemPrice(idx);
			
			// create record key for writing
			Map<String, Constant> keyEntryMap = new HashMap<String, Constant>();
			keyEntryMap.put("i_id", new IntegerConstant(iid));
			RecKey key = new RecKey("item", keyEntryMap);
			addWriteKey(key);

			// Create key-value pairs for writing
			Constant c = new DoubleConstant(newPrice);
			writeConstantMap.put(key, c);
		}
	}


	@Override
	protected void executeSql(Map<RecKey, CalvinRecord> reads) {
		MicroTxnProcParamHelper paramHelper = getParamHelper();
		Transaction tx = getTransaction();
		
		// SELECT
//		for (int idx = 0; idx < paramHelper.getReadCount(); idx++) {
//			int iid = paramHelper.getReadItemId(idx);
//			Scan s = StoredProcedureHelper.executeQuery(
//				"SELECT i_name, i_price FROM item WHERE i_id = " + iid,
//				tx
//			);
//			s.beforeFirst();
//			if (s.next()) {
//				String name = (String) s.getVal("i_name").asJavaVal();
//				double price = (Double) s.getVal("i_price").asJavaVal();
//
//				paramHelper.setItemName(name, idx);
//				paramHelper.setItemPrice(price, idx);
//			} else
//				throw new RuntimeException("Cloud not find item record with i_id = " + iid);
//
//			s.close();
//		}
//		
//		// UPDATE
//		for (int idx = 0; idx < paramHelper.getWriteCount(); idx++) {
//			int iid = paramHelper.getWriteItemId(idx);
//			double newPrice = paramHelper.getNewItemPrice(idx);
//			StoredProcedureHelper.executeUpdate("UPDATE item SET i_price = " + newPrice + " WHERE i_id =" + iid, tx);
//		}
		
		// set write keys
		for (int idx = 0; idx < paramHelper.getWriteCount(); idx++) {
			int iid = paramHelper.getWriteItemId(idx);
			double newPrice = paramHelper.getNewItemPrice(idx);
			
			// create record key for writing
			Map<String, Constant> keyEntryMap = new HashMap<String, Constant>();
			keyEntryMap.put("i_id", new IntegerConstant(iid));
			RecKey key = new RecKey("item", keyEntryMap);			String sql = "UPDATE item SET i_price = " + newPrice + " WHERE i_id =" + iid;

			
//			addWriteKey(key);

			// Create key-value pairs for writing
//			Constant c = new DoubleConstant(newPrice);
//			writeConstantMap.put(key, c);
			String sql = "UPDATE item SET i_price = " + newPrice + " WHERE i_id =" + iid;
			MicroTxnProc.update(key, sql);
		}
	}
}
